<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">一位算士的博客 | a computor's blog: 一位算士的博客 | a computor's blog</title>
 <link rel="self" href="http://kejia.github.io/feeds/all.atom.xml" />
 <link href="http://kejia.github.io/index.html" />
 <id>urn:http-kejia-github-io:-index-html</id>
 <updated>2015-06-19T02:33:36Z</updated>
 <entry>
  <title type="text">醪糟蛋花汤</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/06/18/醪糟蛋花汤/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-06-18-醪糟蛋花汤</id>
  <published>2015-06-19T02:33:36Z</published>
  <updated>2015-06-19T02:33:36Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;em&gt;醪糟蛋花汤有丰胸、下奶的功效。&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;水煮开，放入三大勺醪糟煮2到3分钟左右，放入适量枸杞，打入鸡蛋花，再煮3到5分钟左右出锅。&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">reading programming pears</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/06/18/reading-programming-pears/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-06-18-reading-programming-pears</id>
  <published>2015-06-19T00:51:52Z</published>
  <updated>2015-06-19T00:51:52Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;em&gt;this is my note on reading &lt;strong&gt;programming pears&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="column-1-cracking-the-oyster"&gt;column 1 cracking the oyster&lt;/h2&gt;

&lt;p&gt;understanding a proglem correctly and comprehensively is critical to solve it.&lt;/p&gt;

&lt;h2 id="column-2-aha-algorithms"&gt;column 2 aha! algorithms&lt;/h2&gt;

&lt;blockquote&gt;
 &lt;p&gt;problem 1: given a sequential file that contains at most four billion 32-bit integers in random order, find a 32-bit integer that isn&amp;rsquo;t in the file (and there must be at least one missing&amp;mdash;why?). how would you solve it if you could use several external main memory? how would you solve it if you could use several external ``scratch&amp;rsquo;&amp;rsquo; files but only a few hundred bytes of main memory?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;there are $2 ^ 32 = 4294967296 &amp;gt; 4000000000$ 32-bit integers, so there must be ones in the 4 billion integers missing.&lt;/p&gt;

&lt;p&gt;if the main memory is ample, the problem can be solved by using &lt;em&gt;bitmap&lt;/em&gt; method:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_missing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;nil&lt;/span&gt;
	&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;make_bitmap&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="n"&gt;reset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# k is initalized with 0&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# bit e is set to 1&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		   &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
		   &lt;span class="k"&gt;break&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;if the main memory is restricted and spare files are available, &lt;em&gt;binary search&lt;/em&gt; may be sued to find a missing number:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_missing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;load_file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;find_missing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get_file&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
	&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;get_file&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
	&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
	&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;floor&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;min&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_odd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maximum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	   &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
	&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		   &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
		   &lt;span class="n"&gt;write_file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
		&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		   &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
		   &lt;span class="n"&gt;write_file&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;find_missing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c"&gt;# x may be equal to y: more than 1 number may be missing. if so, choose any part.&lt;/span&gt;
	   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;find_missing&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
 &lt;p&gt;problem 2: rotate a one-dimensional vector of $ n $ elements left by $ i $ positions. for instance, with $ n = 8 $ and $ i = 3 $, the vector &lt;em&gt;abcdefgh&lt;/em&gt; is rotated to &lt;em&gt;defghabc&lt;/em&gt;. try to find a $ O(n) $ time and $O(1)$ space solution.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;use &lt;em&gt;reverse&lt;/em&gt; for the rotating:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rotate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c"&gt;# a &amp;lt;- [a, b, c, d, e, f, g, h] and i &amp;lt;- 3&lt;/span&gt;
	&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
	&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# abcdefgh =&amp;gt; hgfedcba&lt;/span&gt;
	&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# hgfedcba =&amp;gt; hgfedabc&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# hgfedabc =&amp;gt; defghabc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;here, &lt;em&gt;reverse&lt;/em&gt; can take $ O(n) $ time and $ O(1) $ space:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
	&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
	&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
		  &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
		  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
		  &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;
	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">在github.io上部署frog博客引擎</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/06/12/在github-io上部署frog博客引擎/?utm_source=all&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-06-12-在github-io上部署frog博客引擎</id>
  <published>2015-06-12T20:32:08Z</published>
  <updated>2015-06-12T20:32:08Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;em&gt;本文是关于如何在github上部署frog博客引擎的教程。&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;&lt;a href="http://github.com/greghendershott/frog"&gt;frog&lt;/a&gt;是基于&lt;a href="http://racket-lang.org/"&gt;racket&lt;/a&gt;的博客引擎，本文介绍了如何在&lt;a href="http://help.github.com/articles/user-organization-and-project-pages/"&gt;github.io&lt;/a&gt;上部署该博客引擎。&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;制作用于访问github的ssh密钥&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://help.github.com/articles/generating-ssh-keys/"&gt;配置github密钥&lt;/a&gt;。&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;
    &lt;p&gt;查看.ssh已有密钥&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ls -al ~/.ssh&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;若使用已有密钥，则忽略下一步。&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;制作新ssh密钥&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Enter file in which to save the key (/Users/you/.ssh/id_rsa): [press enter]
Enter passphrase (empty for no passphrase): [type a passphrase]
# Enter same passphrase again: [type passphrase again]&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;检测ssh-agent是否运行&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ eval "$(ssh-agent -s)"
# Agent pid 59566&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;公钥交由ssh-agent&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ssh-add ~/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;复制公钥到剪贴板&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;公钥交由github&lt;/p&gt;
    &lt;p&gt;settings &amp;gt; add ssh key&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;测试&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ssh -T git@github.com&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;设置github用户页&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://www.thinkful.com/learn/a-guide-to-using-github-pages/"&gt;github主页指南&lt;/a&gt;。&lt;/p&gt;
  &lt;p&gt;要使用username.github.io的域名，则需要创建github用户页作业，作业仓库名必须是：username.github.io。&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;创建frog作业&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://github.com/greghendershott/frog"&gt;frog指南&lt;/a&gt;。&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;
    &lt;p&gt;克隆github用户页作业&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;bash
 $ mkdir frog
 $ cd frog
 $ git clone https://github.com/username/username.github.io.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;安装frog&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco pkg install frog
$ raco pkg update --update-deps frog
$ aptitude install python-pygments
$ aptitude install python3-pygments&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;建立作业&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ cd username.github.io
$ raco frog --init&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;发布文章&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://github.com/greghendershott/frog"&gt;frog指南&lt;/a&gt;。&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;
    &lt;p&gt;创建文章&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco frog -n "My Post Title"&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;编译并预览&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco frog -bp&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;部署至github&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco frog -b
$ git add .
$ git commit -m 'post my blog'
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/html&gt;</content></entry></feed>