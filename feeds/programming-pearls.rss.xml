<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>一位算士的博客 | a computor's blog: Posts tagged 'programming pearls'</title>
  <description>一位算士的博客 | a computor's blog: Posts tagged 'programming pearls'</description>
  <link>http://kejia.github.io/tags/programming-pearls.html</link>
  <lastBuildDate>Fri, 19 Jun 2015 00:32:32 UT</lastBuildDate>
  <pubDate>Fri, 19 Jun 2015 00:32:32 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>reading programming pearls</title>
   <link>http://kejia.github.io/blog/2015/06/18/reading-programming-pearls/?utm_source=programming-pearls&amp;utm_medium=RSS</link>
   <guid>urn:http-kejia-github-io:-blog-2015-06-18-reading-programming-pearls</guid>
   <pubDate>Fri, 19 Jun 2015 00:32:32 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;&lt;em&gt;this is my note on reading &lt;strong&gt;programming pearls&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h2 id="column-1-cracking-the-oyster"&gt;column 1 cracking the oyster&lt;/h2&gt;

&lt;p&gt;understanding a proglem correctly and comprehensively is critical to solve it.&lt;/p&gt;

&lt;h2 id="column-2-aha-algorithms"&gt;column 2 aha! algorithms&lt;/h2&gt;

&lt;blockquote&gt;
 &lt;p&gt;problem 1: given a sequential file that contains at most four billion 32-bit integers in random order, find a 32-bit integer that isn&amp;rsquo;t in the file (and there must be at least one missing&amp;mdash;why?). how would you solve it if you could use several external main memory? how would you solve it if you could use several external ``scratch&amp;rsquo;&amp;rsquo; files but only a few hundred bytes of main memory?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;there are $2 ^ 32 = 4294967296 &amp;gt; 4000000000$ 32-bit integers, so there must be ones in the 4 billion integers missing.&lt;/p&gt;

&lt;p&gt;if the main memory is ample, the problem can be solved by using &lt;em&gt;bitmap&lt;/em&gt; method:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;pre&gt;&lt;code&gt;def find_missing (a):
	r &amp;lt;- nil
	k &amp;lt;- make_bitmap ()
	reset (k) # k is initalized with 0
	for e in a:
		set (k, e) # bit e is set to 1
	for e in k:
		if e = 0:
		   r &amp;lt;- e
		   break
	return r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;if the main memory is restricted and spare files are available, &lt;em&gt;binary search&lt;/em&gt; may be sued to find a missing number:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;pre&gt;&lt;code&gt;def find_missing (k, min, max):
	a &amp;lt;- load_file (k)
	if size (a) = 1:
	   return find_missing (a[0])
	d &amp;lt;- get_file ()
	x &amp;lt;- 0
	p &amp;lt;- get_file ()
	y &amp;lt;- 0
	m &amp;lt;- floor ((min + max) / 2)
	if is_odd (maximum):
	   x &amp;lt;- -1
	for e in a:
		if e &amp;lt;= m:
		   x &amp;lt;- x + 1
		   write_file (d, e)
		else:
		   y &amp;lt;- y + 1
		   write_file (p, e)
	if x &amp;lt; y:
	   return find_missing (d, min, m)
	else: # x may be equal to y: more than 1 number may be missing. if so, choose any part.
	   return find_missing (p, m + 1, max)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
 &lt;p&gt;problem 2: rotate a one-dimensional vector of $ n $ elements left by $ i $ positions. for instance, with $ n = 8 $ and $ i = 3 $, the vector &lt;em&gt;abcdefgh&lt;/em&gt; is rotated to &lt;em&gt;defghabc&lt;/em&gt;. try to find a $ O(n) $ time and $O(1)$ space solution.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;use &lt;em&gt;reverse&lt;/em&gt; for the rotating:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;pre&gt;&lt;code&gt;def rotate (a, i): # a &amp;lt;- [a, b, c, d, e, f, g, h] and i &amp;lt;- 3
	n &amp;lt;- size (a)
	b &amp;lt;- reverse (a, 0, n - 1) # abcdefgh =&amp;gt; hgfedcba
	c &amp;lt;- reverse (b, n - i, n - 1) # hgfedcba =&amp;gt; hgfedabc
	return reverse (c, 0, n - i - 1) # hgfedabc =&amp;gt; defghabc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;here, &lt;em&gt;reverse&lt;/em&gt; can take $ O(n) $ time and $ O(1) $ space:&lt;/p&gt;

&lt;div class="brush: python"&gt;
 &lt;pre&gt;&lt;code&gt;def reverse (a):
	d &amp;lt;- 0
	p &amp;lt;- size (a) - 1
	while d &amp;lt; p:
		  k &amp;lt;- a[d]
		  a[d] &amp;lt;- a[p]
		  a[p] &amp;lt;- k
	return a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/html&gt;</description></item></channel></rss>