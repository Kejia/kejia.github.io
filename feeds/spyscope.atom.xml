<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">一位算士的博客 | a computor's blog: Posts tagged 'spyscope'</title>
 <link rel="self" href="http://kejia.github.io/feeds/spyscope.atom.xml" />
 <link href="http://kejia.github.io/tags/spyscope.html" />
 <id>urn:http-kejia-github-io:-tags-spyscope-html</id>
 <updated>2015-07-03T19:42:51Z</updated>
 <entry>
  <title type="text">spyscope实现原理</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/07/03/spyscope实现原理/?utm_source=spyscope&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-07-03-spyscope实现原理</id>
  <published>2015-07-03T19:42:51Z</published>
  <updated>2015-07-03T19:42:51Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;em&gt;spyscope把“#spy/p”等符号置于目标符号之前即可工作，其利用了reader的一个特性：edn tagged literal。&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;以下摘自《&lt;a href="http://clojure.org/reader" title="clojure's edn tagged elements"&gt;the reader&lt;/a&gt;》：&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Tagged literals are Clojure&amp;rsquo;s implementation of edn tagged elements.&lt;/p&gt;
 &lt;p&gt;When Clojure starts, it searches for files named data_readers.clj at the root of the classpath. Each such file must contain a Clojure map of symbols, like this:&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;{foo/bar my.project.foo/bar&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt; foo/baz my.project/baz}&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;The key in each pair is a tag that will be recognized by the Clojure reader. The value in the pair is the fully-qualified name of a Var which will be invoked by the reader to parse the form following the tag. For example, given the data_readers.clj file above, the Clojure reader would parse this form:&lt;/p&gt;
 &lt;blockquote&gt;
  &lt;p&gt;#foo/bar [1 2 3]&lt;/p&gt;&lt;/blockquote&gt;
 &lt;p&gt;by invoking the Var #&amp;rsquo;my.project.foo/bar on the vector [1 2 3]. The data reader function is invoked on the form AFTER it has been read as a normal Clojure data structure by the reader.&lt;/p&gt;&lt;/blockquote&gt;&lt;/html&gt;</content></entry></feed>