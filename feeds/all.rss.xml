<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>My Awesome Blog: My Awesome Blog</title>
  <description>My Awesome Blog: My Awesome Blog</description>
  <link>http://www.example.com/index.html</link>
  <lastBuildDate>Tue, 16 Jun 2015 02:54:40 UT</lastBuildDate>
  <pubDate>Tue, 16 Jun 2015 02:54:40 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>在github上使用frog博客引擎</title>
   <link>http://www.example.com/blog/2015/06/15/在github上使用frog博客引擎/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2015-06-15-在github上使用frog博客引擎</guid>
   <pubDate>Tue, 16 Jun 2015 02:54:40 UT</pubDate>
   <description>&lt;html&gt;
&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;制作用于访问github的ssh密钥&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://help.github.com/articles/generating-ssh-keys/"&gt;配置github密钥&lt;/a&gt;。&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;
    &lt;p&gt;查看.ssh已有密钥&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ls -al ~/.ssh&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;若使用已有密钥，则忽略下一步。&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;制作新ssh密钥&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
Enter file in which to save the key (/Users/you/.ssh/id_rsa): [press enter]
Enter passphrase (empty for no passphrase): [type a passphrase]
# Enter same passphrase again: [type passphrase again]&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;检测ssh-agent是否运行&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ eval "$(ssh-agent -s)"
# Agent pid 59566&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;公钥交由ssh-agent&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ssh-add ~/.ssh/id_rsa&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;复制公钥到剪贴板&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;公钥交由github&lt;/p&gt;
    &lt;p&gt;settings &amp;gt; add ssh key&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;测试&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ ssh -T git@github.com&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;设置github用户页&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://www.thinkful.com/learn/a-guide-to-using-github-pages/"&gt;github主页指南&lt;/a&gt;。&lt;/p&gt;
  &lt;p&gt;要使用username.github.io的域名，则需要创建github用户页作业，作业仓库名必须是：username.github.io。&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;创建frog作业&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://github.com/greghendershott/frog"&gt;frog指南&lt;/a&gt;。&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;
    &lt;p&gt;克隆github用户页作业&lt;/p&gt;
    &lt;p&gt;&lt;code&gt;bash
 $ mkdir frog
 $ cd frog
 $ git clone https://github.com/username/username.github.io.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;安装frog&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco pkg install frog
$ raco pkg update --update-deps frog
$ aptitude install python-pygments
$ aptitude install python3-pygments&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;建立作业&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ cd username.github.io
$ raco frog --init&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;发布文章&lt;/p&gt;
  &lt;p&gt;参考：&lt;a href="http://github.com/greghendershott/frog"&gt;frog指南&lt;/a&gt;。&lt;/p&gt;
  &lt;ol&gt;
   &lt;li&gt;
    &lt;p&gt;创建文章&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco frog -n "My Post Title"&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;编译并预览&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco frog -bp&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;部署至github&lt;/p&gt;
    &lt;pre class="brush: bash"&gt;&lt;code&gt;$ raco frog -b
$ git add .
$ git commit -m 'post my blog'
$ git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/html&gt;</description></item>
  <item>
   <title>A 2012 blog post</title>
   <link>http://www.example.com/blog/2012/01/01/a-2012-blog-post/?utm_source=all&amp;utm_medium=RSS</link>
   <guid>urn:http-www-example-com:-blog-2012-01-01-a-2012-blog-post</guid>
   <pubDate>Sun, 01 Jan 2012 05:00:00 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Here is an example blog post.&lt;/p&gt;

&lt;p&gt;Everything after this paragraph &amp;ldquo;after the break&amp;rdquo;. On index pages and Atom feeds, it will become &amp;ldquo;Continue reading&amp;hellip;&amp;rdquo;, if you configure them to include only the summary &amp;ldquo;blurb&amp;rdquo; before the break.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;some code&lt;/code&gt;&lt;/pre&gt;
&lt;!-- more--&gt;

&lt;p&gt;Here&amp;rsquo;s some &lt;a href="http://bullshitipsum.com/?paragraphs=2"&gt;Bullshit Ipsum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Addelivery integrate ecologies e-markets standards-compliant utilize technologies aggregate addelivery viral&amp;mdash;communities dynamic functionalities. Mindshare engineer viral A-list: cross-platform remix engage social cross-media social innovate distributed matrix experiences monetize utilize innovative. Action-items transition recontextualize sexy Cluetrain envisioneer, &amp;ldquo;vortals communities evolve technologies sexy methodologies.&amp;rdquo; Enhance grow compelling iterate architect matrix plug-and-play reinvent scale, distributed incentivize, extend.&lt;/p&gt;

&lt;p&gt;Revolutionary proactive. Target; envisioneer e-services sticky robust morph users methodologies, markets content supply-chains, granular monetize reinvent harness initiatives. Plug-and-play productize vortals integrate compelling aggregate, user-contributed, integrate web-enabled grow extend mindshare, repurpose world-class harness next-generation eyeballs solutions blogospheres extend. Rss-capable methodologies, &amp;ldquo;vortals vertical,&amp;rdquo; synthesize real-time user-contributed impactful utilize architect deploy ROI redefine design proactive strategic user-centric.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a footnote&lt;sup&gt;&lt;a href="#2012-01-01-a-2012-blog-post-footnote-1-definition" name="2012-01-01-a-2012-blog-post-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;h2 id="code-blocks"&gt;Code blocks&lt;/h2&gt;

&lt;p&gt;Frog optionally uses &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; if it&amp;rsquo;s installed to do syntax highlighting. In your markdown using backtick code blocks you can specify a language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```language
some racket code
```&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That name is given to Pygments as the lexer to use.&lt;/p&gt;

&lt;p&gt;For example this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```js
/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!
```&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yields this:&lt;/p&gt;

&lt;div class="brush: js"&gt;
 &lt;pre&gt;&lt;code&gt;/**
 * Some JavaScript
 */
function foo()
{
    if (counter &amp;lt;= 10)
        return;
    // it works!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```racket
#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)
```&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yields this:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;#lang racket
;; Finds Racket sources in all subdirs
(for ([path (in-directory)])
  (when (regexp-match? #rx"[.]rkt$" path)
    (printf "source file: ~a\n" path)))
(symbol-&amp;gt;string 'foo)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that, for Racket, symbols with unambiguous documentation (provided by one library, or provided by several where one is &lt;code&gt;racket&lt;/code&gt; or &lt;code&gt;racket/base&lt;/code&gt;) are links to that documentation.&lt;/p&gt;

&lt;p&gt;This also works outside fenced code blocks, for symbols in backticks immediately followed by &lt;code&gt;[racket]&lt;/code&gt;. Example: &lt;code&gt;printf&lt;/code&gt;. This isn&amp;rsquo;t official Markdown; it&amp;rsquo;s simply a pun on link syntax and fenced code block languages. This is similar to using &lt;code&gt;@racket[printf]&lt;/code&gt; in Scribble.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;symbol-&amp;gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is a lambda: λ.&lt;/p&gt;

&lt;p&gt;Here is a lambda in code backticks: &lt;code&gt;λ&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And here in indented code block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here in fenced code block, no lang specified:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here in fenced code block, lang = &lt;code&gt;racket&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here in fenced code block, lang = &lt;code&gt;scheme&lt;/code&gt;:&lt;/p&gt;

&lt;div class="brush: scheme"&gt;
 &lt;pre&gt;&lt;code&gt;(λ () #t)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a simple &lt;code&gt;for&lt;/code&gt; macro, written in &lt;a href="http://docs.racket-lang.org/reference/stx-patterns.html"&gt;Racket&lt;/a&gt;:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;pre&gt;&lt;code&gt;(define-syntax-rule (for (x e1) e2)
  (for-each (λ (x) e2) e1))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The end.&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2012-01-01-a-2012-blog-post-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;Footnote definition.&amp;nbsp;&lt;a href="#2012-01-01-a-2012-blog-post-footnote-1-return"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/html&gt;</description></item></channel></rss>