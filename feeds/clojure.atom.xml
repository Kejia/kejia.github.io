<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">一位算士的博客 | a computor's blog: Posts tagged 'clojure'</title>
 <link rel="self" href="http://kejia.github.io/feeds/clojure.atom.xml" />
 <link href="http://kejia.github.io/tags/clojure.html" />
 <id>urn:http-kejia-github-io:-tags-clojure-html</id>
 <updated>2015-08-19T15:08:37Z</updated>
 <entry>
  <title type="text">outputting to edn in clojure</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/08/19/outputting-to-edn-in-clojure/?utm_source=clojure&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-08-19-outputting-to-edn-in-clojure</id>
  <published>2015-08-19T15:08:37Z</published>
  <updated>2015-08-19T15:08:37Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;div class="brush: clojure"&gt;
 &lt;pre&gt;&lt;code&gt;(spit "/xi/xii.edn" (with-out-str (clojure.pprint/pprint x)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">spyscope实现原理</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/07/03/spyscope实现原理/?utm_source=clojure&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-07-03-spyscope实现原理</id>
  <published>2015-07-03T19:42:51Z</published>
  <updated>2015-07-03T19:42:51Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;&lt;em&gt;目前，clojure尚未提供完善的非repl调试器，&lt;a href="http://github.com/dgrnbrg/spyscope"&gt;spyscope&lt;/a&gt;提供了较好的调试接口。&lt;a href="http://github.com/dgrnbrg/spyscope"&gt;spyscope&lt;/a&gt;把“#spy/p”等符号置于目标符号之前即可工作，其利用了reader的一个特性：edn tagged literal。&lt;/em&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;以下摘自《&lt;a href="http://clojure.org/reader" title="clojure's edn tagged elements"&gt;the reader&lt;/a&gt;》：&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;Tagged literals are Clojure&amp;rsquo;s implementation of edn tagged elements.&lt;/p&gt;
 &lt;p&gt;When Clojure starts, it searches for files named data_readers.clj at the root of the classpath. Each such file must contain a Clojure map of symbols, like this:&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class="brush: clojure"&gt;
 &lt;pre&gt;&lt;code&gt;{foo/bar my.project.foo/bar
 foo/baz my.project/baz}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
 &lt;p&gt;The key in each pair is a tag that will be recognized by the Clojure reader. The value in the pair is the fully-qualified name of a Var which will be invoked by the reader to parse the form following the tag. For example, given the data_readers.clj file above, the Clojure reader would parse this form:&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class="brush: clojure"&gt;
 &lt;pre&gt;&lt;code&gt;#foo/bar [1 2 3]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
 &lt;p&gt;by invoking the Var #&amp;rsquo;my.project.foo/bar on the vector [1 2 3]. The data reader function is invoked on the form AFTER it has been read as a normal Clojure data structure by the reader.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://github.com/dgrnbrg/spyscope"&gt;spyscope&lt;/a&gt;即据此实现，其spyscope/src/data_readers.clj定义如下：&lt;/p&gt;

&lt;div class="brush: clojure"&gt;
 &lt;pre&gt;&lt;code&gt;{spy/p spyscope.core/print-log
 spy/d spyscope.core/print-log-detailed
 spy/t spyscope.core/trace}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;spyscope.core/print-log等被定义为普通函数： &lt;code&gt;clojure
(defn print-log
  "Reader function to pprint a form's value."
  [form]
  `(doto ~form pp/pprint))&lt;/code&gt; 用例：&lt;/p&gt;

&lt;div class="brush: bash"&gt;
 &lt;pre&gt;&lt;code&gt;spyscope.repl=&amp;gt; (take 20 (repeat #spy/p (+ 1 2 3)))
6
(6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">take-while of clojure</title>
  <link rel="alternate" href="http://kejia.github.io/blog/2015/06/19/take-while-of-clojure/?utm_source=clojure&amp;utm_medium=Atom" />
  <id>urn:http-kejia-github-io:-blog-2015-06-19-take-while-of-clojure</id>
  <published>2015-06-19T14:20:23Z</published>
  <updated>2015-06-19T14:20:23Z</updated>
  <author>
   <name>柯嘉 | kejia</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;in clojure, &lt;code&gt;take-while' is similar to&lt;/code&gt;filter&amp;rsquo;, but they are different.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;div class="brush: clojure"&gt;
 &lt;pre&gt;&lt;code&gt;&amp;gt; (filter pos? [8 0 -1 2 -3])
(8 2)
&amp;gt; (take-while pos? [8 0 -1 2 -3])
(8)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;`take-while&amp;rsquo; stops traversing the list when the predicate is false.&lt;/p&gt;&lt;/html&gt;</content></entry></feed>