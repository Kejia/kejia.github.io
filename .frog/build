((3) 0 () 3 ((p+ #"/home/kejia/\346\241\214\351\235\242/frog/kejia.github.io/_src/posts/2015-06-15-\345\234\250github\344\270\212\344\275\277\347\224\250frog\345\215\232\345\256\242\345\274\225\346\223\216.md" . unix) (p+ #"/home/kejia/\346\241\214\351\235\242/frog/kejia.github.io/_src/posts/2015-06-18-\351\206\252\347\263\237\350\233\213\350\212\261\346\261\244.md" . unix) (p+ #"/home/kejia/\346\241\214\351\235\242/frog/kejia.github.io/_src/posts/2015-06-18-reading-programming-pears.md" . unix)) () (h ! (equal) ((? . 0) f post (u . "在github.io上部署frog博客引擎") (? . 0) 1434675720 (p+ #"/home/kejia/\346\241\214\351\235\242/frog/kejia.github.io/blog/2015/06/12/\345\234\250github-io\344\270\212\351\203\250\347\275\262frog\345\215\232\345\256\242\345\274\225\346\223\216/index.html" . unix) "/blog/2015/06/12/在github-io上部署frog博客引擎/" (u . "2015-06-12T16:32:08") #f (? . 2) (c (u . "教程") c (u . "racket") c (u . "frog") c (u . "博客")) (u . "\n<p><em>本文是关于如何在github上部署frog博客引擎的教程。</em></p>") #t (u . "\n<p><em>本文是关于如何在github上部署frog博客引擎的教程。</em></p>\n<!-- more-->\n\n<p><a href=\"http://github.com/greghendershott/frog\">frog</a>是基于<a href=\"http://racket-lang.org/\">racket</a>的博客引擎，本文介绍了如何在<a href=\"http://help.github.com/articles/user-organization-and-project-pages/\">github.io</a>上部署该博客引擎。</p>\n\n<ol>\n <li>\n  <p>制作用于访问github的ssh密钥</p>\n  <p>参考：<a href=\"http://help.github.com/articles/generating-ssh-keys/\">配置github密钥</a>。</p>\n  <ol>\n   <li>\n    <p>查看.ssh已有密钥</p>\n    <pre class=\"brush: bash\"><code>$ ls -al ~/.ssh</code></pre>\n    <p>若使用已有密钥，则忽略下一步。</p></li>\n   <li>\n    <p>制作新ssh密钥</p>\n    <pre class=\"brush: bash\"><code>$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nEnter file in which to save the key (/Users/you/.ssh/id_rsa): [press enter]\nEnter passphrase (empty for no passphrase): [type a passphrase]\n# Enter same passphrase again: [type passphrase again]</code></pre></li>\n   <li>\n    <p>检测ssh-agent是否运行</p>\n    <pre class=\"brush: bash\"><code>$ eval \"$(ssh-agent -s)\"\n# Agent pid 59566</code></pre></li>\n   <li>\n    <p>公钥交由ssh-agent</p>\n    <pre class=\"brush: bash\"><code>$ ssh-add ~/.ssh/id_rsa</code></pre></li>\n   <li>\n    <p>复制公钥到剪贴板</p>\n    <pre class=\"brush: bash\"><code>$ xclip -sel clip &lt; ~/.ssh/id_rsa.pub</code></pre></li>\n   <li>\n    <p>公钥交由github</p>\n    <p>settings &gt; add ssh key</p></li>\n   <li>\n    <p>测试</p>\n    <pre class=\"brush: bash\"><code>$ ssh -T git@github.com</code></pre></li></ol></li>\n <li>\n  <p>设置github用户页</p>\n  <p>参考：<a href=\"http://www.thinkful.com/learn/a-guide-to-using-github-pages/\">github主页指南</a>。</p>\n  <p>要使用username.github.io的域名，则需要创建github用户页作业，作业仓库名必须是：username.github.io。</p></li>\n <li>\n  <p>创建frog作业</p>\n  <p>参考：<a href=\"http://github.com/greghendershott/frog\">frog指南</a>。</p>\n  <ol>\n   <li>\n    <p>克隆github用户页作业</p>\n    <p><code>bash\n $ mkdir frog\n $ cd frog\n $ git clone https://github.com/username/username.github.io.git</code></p></li>\n   <li>\n    <p>安装frog</p>\n    <pre class=\"brush: bash\"><code>$ raco pkg install frog\n$ raco pkg update --update-deps frog\n$ aptitude install python-pygments\n$ aptitude install python3-pygments</code></pre></li>\n   <li>\n    <p>建立作业</p>\n    <pre class=\"brush: bash\"><code>$ cd username.github.io\n$ raco frog --init</code></pre></li></ol></li>\n <li>\n  <p>发布文章</p>\n  <p>参考：<a href=\"http://github.com/greghendershott/frog\">frog指南</a>。</p>\n  <ol>\n   <li>\n    <p>创建文章</p>\n    <pre class=\"brush: bash\"><code>$ raco frog -n \"My Post Title\"</code></pre></li>\n   <li>\n    <p>编译并预览</p>\n    <pre class=\"brush: bash\"><code>$ raco frog -bp</code></pre></li>\n   <li>\n    <p>部署至github</p>\n    <pre class=\"brush: bash\"><code>$ raco frog -b\n$ git add .\n$ git commit -m 'post my blog'\n$ git push origin master</code></pre></li></ol></li></ol>")) ((? . 1) f post (u . "醪糟蛋花汤") (? . 1) 1434681432 (p+ #"/home/kejia/\346\241\214\351\235\242/frog/kejia.github.io/blog/2015/06/18/\351\206\252\347\263\237\350\233\213\350\212\261\346\261\244/index.html" . unix) "/blog/2015/06/18/醪糟蛋花汤/" (u . "2015-06-18T22:33:36") (? . 2) #f (c (u . "食谱")) (u . "\n<p><em>醪糟蛋花汤有丰胸、下奶的功效。</em></p>") #t (u . "\n<p><em>醪糟蛋花汤有丰胸、下奶的功效。</em></p>\n<!-- more-->\n\n<p>水煮开，放入三大勺醪糟煮2到3分钟左右，放入适量枸杞，打入鸡蛋花，再煮3到5分钟左右出锅。</p>")) ((? . 2) f post (u . "reading programming pears") (? . 2) 1434681034 (p+ #"/home/kejia/\346\241\214\351\235\242/frog/kejia.github.io/blog/2015/06/18/reading-programming-pears/index.html" . unix) "/blog/2015/06/18/reading-programming-pears/" (u . "2015-06-18T20:51:52") (? . 0) (? . 1) (c (u . "programming pears")) (u . "\n<p><em>this is my note on reading <strong>programming pears</strong>.</em></p>") #t (u . "\n<p><em>this is my note on reading <strong>programming pears</strong>.</em></p>\n<!-- more-->\n\n<h2 id=\"column-1-cracking-the-oyster\">column 1 cracking the oyster</h2>\n\n<p>understanding a proglem correctly and comprehensively is critical to solve it.</p>\n\n<h2 id=\"column-2-aha-algorithms\">column 2 aha! algorithms</h2>\n\n<blockquote>\n <p>problem 1: given a sequential file that contains at most four billion 32-bit integers in random order, find a 32-bit integer that isn&rsquo;t in the file (and there must be at least one missing&mdash;why?). how would you solve it if you could use several external main memory? how would you solve it if you could use several external ``scratch&rsquo;&rsquo; files but only a few hundred bytes of main memory?</p></blockquote>\n\n<p>there are $2 ^ 32 = 4294967296 &gt; 4000000000$ 32-bit integers, so there must be ones in the 4 billion integers missing.</p>\n\n<p>if the main memory is ample, the problem can be solved by using <em>bitmap</em> method:</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"k\">def</span> <span class=\"nf\">find_missing</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n\t<span class=\"n\">r</span> <span class=\"o\">&lt;-</span> <span class=\"n\">nil</span>\n\t<span class=\"n\">k</span> <span class=\"o\">&lt;-</span> <span class=\"n\">make_bitmap</span> <span class=\"p\">()</span>\n\t<span class=\"n\">reset</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"c\"># k is initalized with 0</span>\n\t<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n\t\t<span class=\"nb\">set</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"c\"># bit e is set to 1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\t\t   <span class=\"n\">r</span> <span class=\"o\">&lt;-</span> <span class=\"n\">e</span>\n\t\t   <span class=\"k\">break</span>\n\t<span class=\"k\">return</span> <span class=\"n\">r</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>if the main memory is restricted and spare files are available, <em>binary search</em> may be sued to find a missing number:</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"k\">def</span> <span class=\"nf\">find_missing</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">):</span>\n\t<span class=\"n\">a</span> <span class=\"o\">&lt;-</span> <span class=\"n\">load_file</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">size</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n\t   <span class=\"k\">return</span> <span class=\"n\">find_missing</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\t<span class=\"n\">d</span> <span class=\"o\">&lt;-</span> <span class=\"n\">get_file</span> <span class=\"p\">()</span>\n\t<span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">p</span> <span class=\"o\">&lt;-</span> <span class=\"n\">get_file</span> <span class=\"p\">()</span>\n\t<span class=\"n\">y</span> <span class=\"o\">&lt;-</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">m</span> <span class=\"o\">&lt;-</span> <span class=\"n\">floor</span> <span class=\"p\">((</span><span class=\"nb\">min</span> <span class=\"o\">+</span> <span class=\"nb\">max</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">is_odd</span> <span class=\"p\">(</span><span class=\"n\">maximum</span><span class=\"p\">):</span>\n\t   <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\t<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n\t\t<span class=\"k\">if</span> <span class=\"n\">e</span> <span class=\"o\">&lt;=</span> <span class=\"n\">m</span><span class=\"p\">:</span>\n\t\t   <span class=\"n\">x</span> <span class=\"o\">&lt;-</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t   <span class=\"n\">write_file</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n\t\t<span class=\"k\">else</span><span class=\"p\">:</span>\n\t\t   <span class=\"n\">y</span> <span class=\"o\">&lt;-</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\t\t   <span class=\"n\">write_file</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n\t<span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"p\">:</span>\n\t   <span class=\"k\">return</span> <span class=\"n\">find_missing</span> <span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n\t<span class=\"k\">else</span><span class=\"p\">:</span> <span class=\"c\"># x may be equal to y: more than 1 number may be missing. if so, choose any part.</span>\n\t   <span class=\"k\">return</span> <span class=\"n\">find_missing</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<blockquote>\n <p>problem 2: rotate a one-dimensional vector of $ n $ elements left by $ i $ positions. for instance, with $ n = 8 $ and $ i = 3 $, the vector <em>abcdefgh</em> is rotated to <em>defghabc</em>. try to find a $ O(n) $ time and $O(1)$ space solution.</p></blockquote>\n\n<p>use <em>reverse</em> for the rotating:</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"k\">def</span> <span class=\"nf\">rotate</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">):</span> <span class=\"c\"># a &lt;- [a, b, c, d, e, f, g, h] and i &lt;- 3</span>\n\t<span class=\"n\">n</span> <span class=\"o\">&lt;-</span> <span class=\"n\">size</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n\t<span class=\"n\">b</span> <span class=\"o\">&lt;-</span> <span class=\"n\">reverse</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c\"># abcdefgh =&gt; hgfedcba</span>\n\t<span class=\"n\">c</span> <span class=\"o\">&lt;-</span> <span class=\"n\">reverse</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c\"># hgfedcba =&gt; hgfedabc</span>\n\t<span class=\"k\">return</span> <span class=\"n\">reverse</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c\"># hgfedabc =&gt; defghabc</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>here, <em>reverse</em> can take $ O(n) $ time and $ O(1) $ space:</p>\n\n<div class=\"brush: python\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span class=\"k\">def</span> <span class=\"nf\">reverse</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">):</span>\n\t<span class=\"n\">d</span> <span class=\"o\">&lt;-</span> <span class=\"mi\">0</span>\n\t<span class=\"n\">p</span> <span class=\"o\">&lt;-</span> <span class=\"n\">size</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\t<span class=\"k\">while</span> <span class=\"n\">d</span> <span class=\"o\">&lt;</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n\t\t  <span class=\"n\">k</span> <span class=\"o\">&lt;-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span>\n\t\t  <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">d</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span>\n\t\t  <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">]</span> <span class=\"o\">&lt;-</span> <span class=\"n\">k</span>\n\t<span class=\"k\">return</span> <span class=\"n\">a</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>"))))